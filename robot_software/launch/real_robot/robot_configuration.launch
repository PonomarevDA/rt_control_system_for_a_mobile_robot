<?xml version="1.0" encoding="UTF-8"?>
<!-- Bring up all the hardware and transform publishes that the robot needs -->
<launch>
  <arg name="model" default="burger" doc="[burger, waffle, caterpillar_mobile_robot, ...]" />

  <!-- 1. Sensors: ydlidar and camera -->
  <include file="$(find robot_software)/launch/real_robot/ydlidar.launch"/>
  <include file="$(find robot_software)/launch/real_robot/camera.launch"/>

  <!-- 2. Serial node for communication between RPI and stm32 -->
  <include file="$(find robot_software)/launch/real_robot/rosserial.launch"/>

  <!-- 3. The transform configuration from position data that rosserial get from stm32 to odom data for TF. -->
  <node name="tf_broadcaster" pkg="robot_software" type="robot_tf_broadcaster.py">
    <remap from="input_pose" to="/positionTopic"/>
  </node>
  <node name="state_publisher" pkg="robot_software" type="state_publisher" />

  <!-- 4. Calculate the forward kinematics of the robot and publish the results via tf using parameter robot_description. -->
  <param name="robot_description" command="$(find xacro)/xacro $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/>

  <!-- 5. Static transform -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_base_footprint"
    args="0.0 0.0 0.1 0.0 0.0 0.0 /base_footprint /base_link 20" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_wheel_left_link"
    args="0.0 0.1 0.0 0.0 0.0 0.0 /base_link /wheel_left_link 20" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_wheel_right_link"
    args="0.0 -0.1 0.0 0.0 0.0 0.0 /base_link /wheel_right_link 20" />
</launch>

